//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : SimpleReactor.sm
//

#ifndef SIMPLEREACTOR_SM_H
#define SIMPLEREACTOR_SM_H


#define SMC_USES_IOSTREAMS

#include <statemap.h>

// Forward declarations.
class MainMap;
class MainMap_Start;
class MainMap_Default;
class SimpleReactorState;
class SimpleReactorContext;
class SimpleReactor;

class SimpleReactorState :
    public statemap::State
{
public:

    SimpleReactorState(const char * const name, const int stateId)
    : statemap::State(name, stateId)
    {};

    virtual void Entry(SimpleReactorContext&) {};
    virtual void Exit(SimpleReactorContext&) {};

    virtual void receivedEvSimpleMsg(SimpleReactorContext& context, events::EvBase p_evSimpleMessage);
    virtual void receivedEvSimpleNumber(SimpleReactorContext& context, events::EvBase p_evSimpleNumber);

protected:

    virtual void Default(SimpleReactorContext& context);
};

class MainMap
{
public:

    static MainMap_Start Start;
};

class MainMap_Default :
    public SimpleReactorState
{
public:

    MainMap_Default(const char * const name, const int stateId)
    : SimpleReactorState(name, stateId)
    {};

};

class MainMap_Start :
    public MainMap_Default
{
public:
    MainMap_Start(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void Entry(SimpleReactorContext&);
    virtual void receivedEvSimpleMsg(SimpleReactorContext& context, events::EvBase p_evSimpleMessage);
    virtual void receivedEvSimpleNumber(SimpleReactorContext& context, events::EvBase p_evSimpleNumber);
};

class SimpleReactorContext :
    public statemap::FSMContext
{
public:

    explicit SimpleReactorContext(SimpleReactor& owner)
    : FSMContext(MainMap::Start),
      _owner(owner)
    {};

    SimpleReactorContext(SimpleReactor& owner, const statemap::State& state)
    : FSMContext(state),
      _owner(owner)
    {};

    virtual void enterStartState()
    {
        getState().Entry(*this);
        return;
    }

    inline SimpleReactor& getOwner()
    {
        return (_owner);
    };

    inline SimpleReactorState& getState()
    {
        if (_state == NULL)
        {
            throw statemap::StateUndefinedException();
        }

        return dynamic_cast<SimpleReactorState&>(*_state);
    };

    inline void receivedEvSimpleMsg(events::EvBase p_evSimpleMessage)
    {
        getState().receivedEvSimpleMsg(*this, p_evSimpleMessage);
    };

    inline void receivedEvSimpleNumber(events::EvBase p_evSimpleNumber)
    {
        getState().receivedEvSimpleNumber(*this, p_evSimpleNumber);
    };

private:
    SimpleReactor& _owner;
};


#endif // SIMPLEREACTOR_SM_H

//
// Local variables:
//  buffer-read-only: t
// End:
//
