//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : SimpleReactor.sm
//

#include "SimpleReactor.h"
#include "events/EvBase.h"
#include "reactor/SimpleReactor_sm.h"

using namespace statemap;
using namespace events;

// Static class declarations.
MainMap_Start MainMap::Start("MainMap::Start", 0);

void SimpleReactorState::receivedEvSimpleMsg(SimpleReactorContext& context, events::EvBase p_evSimpleMessage)
{
    Default(context);
}

void SimpleReactorState::receivedEvSimpleNumber(SimpleReactorContext& context, events::EvBase p_evSimpleNumber)
{
    Default(context);
}

void SimpleReactorState::Default(SimpleReactorContext& context)
{
    throw (
        TransitionUndefinedException(
            (context.getState()).getName(),
            context.getTransition()));

}

void MainMap_Start::Entry(SimpleReactorContext& context)

{
    SimpleReactor& ctxt = context.getOwner();

    ctxt.printLogStatement();
}

void MainMap_Start::receivedEvSimpleMsg(SimpleReactorContext& context, events::EvBase p_evSimpleMessage)
{
    SimpleReactor& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.procSimpleMessage(p_evSimpleMessage);
        context.setState(MainMap::Start);
    }
    catch (...)
    {
        context.setState(MainMap::Start);
        throw;
    }
    context.getState().Entry(context);


}

void MainMap_Start::receivedEvSimpleNumber(SimpleReactorContext& context, events::EvBase p_evSimpleNumber)
{
    SimpleReactor& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.procSimpleNumber(p_evSimpleNumber);
        context.setState(MainMap::Start);
    }
    catch (...)
    {
        context.setState(MainMap::Start);
        throw;
    }
    context.getState().Entry(context);


}

//
// Local variables:
//  buffer-read-only: t
// End:
//
